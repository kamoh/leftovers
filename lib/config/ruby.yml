---
include_paths:
  - '#!:ruby'
  - '*.rb'

  # Gem
  - '*.gemspec'

  # IRB
  - .irbrc
  - irb.rc
  - _irbrc
  - $irbrc

  # Bundler
  - Gemfile

  # ERB
  - '*.erb'
  - '*.rhtml'

test_paths:
  - /tests/
  - /test/

precompile:
  # ERB
  - { paths: ['*.erb', '*.rhtml'], format: 'erb' }

keep:
  # https://ruby-doc.org/core/Kernel.html#method-i-p
  - inspect # called by repl, p, default to_s

  # https://ruby-doc.org/core/Numeric.html#method-i-coerce
  - coerce # called by Numeric

  # https://ruby-doc.org/core/Kernel.html#method-i-Array
  - to_ary # called by Array(), []+
  - to_a # called by Array(), *splat

  # https://ruby-doc.org/core/Kernel.html#method-i-String
  - to_s # called by String(), "#{}"
  - to_str # called by String(), ""+

  # https://ruby-doc.org/core/Kernel.html#method-i-Hash
  - to_hash # called by Hash(), **splat

  - to_proc # called by &

  - <=> # called by all of the Comparable methods
  - each # called by all of the Enumerable methods

  - === # called by when
  - == # called by Array value, Hash value equality,
  - hash # called by Hash key equality
  - eql? # called by Hash key equality, uniq

  # https://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_added
  - singleton_method_added
  # https://ruby-doc.org/core/BasicObject.html#method-i-method_missing
  - method_missing

  # https://ruby-doc.org/core/Class.html#method-i-inherited
  # called by Subclass < Klass or Class.new(Klass)
  - inherited

  # https://ruby-doc.org/core/Module.html#method-i-const_missing
  - const_missing

  # https://ruby-doc.org/core/Module.html#method-i-method_added
  - method_added

  # https://ruby-doc.com/stdlib/libdoc/delegate/rdoc/Delegator.html
  - __getobj__
  - __setobj__

  ### GLOBAL VARIABLES

  # https://ruby-doc.org/core/doc/globals_rdoc.html
  # https://ruby-doc.com/stdlib/libdoc/English/rdoc/English.html
  - $stdin
  - $stderr
  - $stdout
  - $> # $stdout
  - $DEFAULT_OUTPUT # English alias $>
  - $VERBOSE # enable warnings
  - $-v # alias $VERBOSE
  - $-w # alias $VERBOSE
  - $DEBUG # enable debug
  - $-d # alias $DEBUG
  - $, # Array.join/Kernel.print default field separator
  - $OFS # English alias $,
  - $OUTPUT_FIELD_SEPARATOR # English alias $,
  - $; # String.split default separator
  - $-F # alias $;
  - $FS # English alias $;
  - $FIELD_SEPARATOR # English alias $;
  - $/ # input record separator
  - $-0 # alias $/
  - $RS # English alias $/
  - $INPUT_RECORD_SEPARATOR # English alias $/
  - $\ # Kernel.print/IO.write default output record separator
  - $ORS # English alias $\
  - $OUTPUT_RECORD_SEPARATOR # English alias $\

  ## some technically editable default global variables that shouldn't be written
  # - $. # last line number read
  # - $INPUT_LINE_NUMBER # English alias $.
  # - $_ # last string read by gets or readline
  # - $LAST_READ_LINE # English alias $_
  # - $-i # in place edit mode extension i don't know what this means
  # - $~ # last match
  # - $LAST_MATCH_INFO # English alias $~
  # - $PROGRAM_NAME
  # - $0 # alias $PROGRAM_NAME

dynamic:
  #     BasicObject
  #
  # https://ruby-doc.org/core/BasicObject.html

  # https://ruby-doc.org/core/BasicObject.html#__send__
  - name: __send__
    calls: 0

  # https://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_removed
  - name: remove_method
    calls:
      value: singleton_method_removed

  # https://ruby-doc.org/core/BasicObject.html#method-i-singleton_method_undefined
  - name: undef_method
    calls:
      value: singleton_method_undefined

  # https://ruby-doc.org/core/BasicObject.html#method-i-instance_eval
  - name: instance_eval
    eval: 0

  #     Kernel
  #
  # https://ruby-doc.org/core/Kernel.html

  # https://ruby-doc.org/core/Kernel.html#method-i-Float
  - name: Float
    calls:
      value: to_f

  # https://ruby-doc.org/core/Kernel.html#method-i-Integer
  - name: Integer
    calls:
      values: [to_int, to_i]

  # https://ruby-doc.org/core/Kernel.html#method-i-eval
  - name: eval
    calls: 0


  #     Object
  #
  # https://ruby-doc.org/core/Object.html

  # https://ruby-doc.org/core/Object.html#method-i-define_singleton_method
  - name: define_singleton_method
    defines: 0

  # https://ruby-doc.org/core/Object.html#method-i-dup
  - name: dup
    calls:
      value: initialize_copy

  # https://ruby-doc.org/core/Object.html#method-i-enum_for
  # https://ruby-doc.org/core/Object.html#method-i-to_enum
  - name: [enum_for, to_enum]
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-extend
  - name: extend
    calls:
      value: extended

  # https://ruby-doc.org/core/Object.html#method-i-instance_variable_get
  - name: instance_variable_get
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-instance_variable_set
  - name: instance_variable_set
    defines: 0

  # https://ruby-doc.org/core/Object.html#method-i-method
  - name: method
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-public_method
  - name: public_method
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-public_send
  - name: public_send
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-remove_instance_variable
  - name: remove_instance_variable
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-respond_to-3F
  - name: respond_to?
    calls:
      value: respond_to_missing?

  # https://ruby-doc.org/core/Object.html#method-i-send
  - name: send
    calls: 0

  # https://ruby-doc.org/core/Object.html#method-i-singleton_method
  - name: singleton_method
    calls: 0

  #    Module
  #
  # https://ruby-doc.org/core/Module.html

  # https://ruby-doc.org/core/Module.html#method-i-alias_method
  # Makes new_name a new copy of the method old_name.
  - name: alias_method
    defines: 0
    calls: 1

  # https://ruby-doc.org/core/Module.html#method-i-attr
  # attr(name, ...) is equivalent to attr_reader.
  # attr(name, true) is equivalent to attr_accessor(name) but deprecated.
  # attr(name, false) is equivalent to attr_reader(name) but deprecated.
  - name: attr
    defines:
      argument: '*'
    calls:
      argument: '*'
      add_prefix: '@'

  - name: attr
    defines:
      - argument: '0'
        add_suffix: '='
    has_argument:
      at: 1
      has_value: true
    unless:
      has_argument: 2

  # https://ruby-doc.org/core/Module.html#method-i-attr_accessor
  - name: attr_accessor
    defines:
      - argument: '*'
        add_suffix: '='
      - argument: '*'
    calls:
      argument: '*'
      add_prefix: '@'

  # https://ruby-doc.org/core/Module.html#method-i-attr_reader
  - name: attr_reader
    defines:
      argument: '*'
    calls:
      argument: '*'
      add_prefix: '@'

  # https://ruby-doc.org/core/Module.html#method-i-attr_reader
  - name: attr_writer
    defines:
      argument: '*'
      add_suffix: '='

  # https://ruby-doc.org/core/Module.html#method-i-autoload
  # autoload(module, filename)
  # Registers filename to be loaded (using Kernel::require) the first time that module (which may
  # be a String or a symbol) is accessed in the namespace of mod.
  - name: autoload
    defines: 0

  # https://ruby-doc.org/core/Module.html#method-i-class_variable_get
  - name: class_variable_get
    calls: 0

  # https://ruby-doc.org/core/Module.html#method-i-class_variable_set
  - name: class_variable_set
    defines: 0

  # https://ruby-doc.org/core/Module.html#method-i-const_get
  - name: const_get
    calls:
      argument: 0
      split: '::'

  # https://ruby-doc.org/core/Module.html#method-i-const_set
  - name: const_set
    calls: 0

  # https://ruby-doc.org/core/Module.html#method-i-define_method
  - name: define_method
    defines: 0

  # https://ruby-doc.org/core/Module.html#method-i-extend_object
  # https://ruby-doc.org/core/Module.html#method-i-extended
  - name: extend
    calls:
      values: [extend_object, extended]

  # https://ruby-doc.org/core/Module.html#method-i-include
  # https://ruby-doc.org/core/Module.html#method-i-included
  # https://ruby-doc.org/core/Module.html#method-i-append_features
  - name: include
    calls:
      values: [append_features, included]

  # https://ruby-doc.org/core/Module.html#method-i-instance_method
  - name: instance_method
    calls: 0

  # https://ruby-doc.org/core/Module.html#method-i-prepend
  # https://ruby-doc.org/core/Module.html#method-i-prepend_features
  # https://ruby-doc.org/core/Module.html#method-i-prepended
  - name: prepend
    calls:
      values: [prepend_features, prepended]

  # https://ruby-doc.org/core/Module.html#method-i-private_class_method
  # private_class_method(symbol, ...)
  # private_class_method(string, ...)
  # private_class_method(array)
  - name: private_class_method
    has_argument: 0
    set_privacy:
      argument: '*'
      nested:
        argument: '*'
      to: private

  # https://ruby-doc.org/core/Module.html#method-i-private_constant
  - name: private_constant
    has_argument: 0
    set_privacy:
      argument: '*'
      to: private

  # https://ruby-doc.org/core/Module.html#method-i-public_class_method
  # public_class_method(symbol, ...)
  # public_class_method(string, ...)
  # public_class_method(array)
  - name: public_class_method
    has_argument: 0
    set_privacy:
      argument: '*'
      nested:
        argument: '*'
      to: private

  # https://ruby-doc.org/core/Module.html#method-i-public_constant
  - name: public_constant
    has_argument: 0
    set_privacy:
      argument: '*'
      to: private

  # https://ruby-doc.org/core/Module.html#method-i-remove_class_variable
  - name: remove_class_variable
    calls: 0

  # https://ruby-doc.org/core/Module.html#method-i-private
  # private sets the default visibility for subsequently defined methods to private
  # private(method_name) sets the named methods to have private visibility
  # private(method_name, method_name, ...)
  # private(array)
  - name: private
    unless:
      has_argument: 0
    set_default_privacy: private

  - name:
      - private
    has_argument: 0
    set_privacy:
      argument: '*'
      nested:
        argument: '*'
      to: private

  # https://ruby-doc.org/core/Module.html#method-i-protected
  # protected sets the default visibility for subsequently defined methods to protected
  # protected(method_name) sets the named methods to have protected visibility
  # protected(method_name, method_name, ...)
  # protected(array)

  - name: protected
    unless:
      has_argument: 0
    set_default_privacy: protected

  - name: protected
    has_argument: 0
    set_privacy:
      argument: '*'
      nested:
        argument: '*'
      to: protected

  # https://ruby-doc.org/core/Module.html#method-i-public
  # public sets the default visibility for subsequently defined methods to public
  # public(method_name) sets the named methods to have public visibility
  # public(method_name, method_name, ...)
  # public(array)

  - name: public
    unless:
      has_argument: 0
    set_default_privacy: public

  - name: public
    has_argument: 0
    set_privacy:
      argument: '*'
      nested:
        argument: '*'
      to: public

  # https://ruby-doc.org/core/Module.html#method-i-remove_const
  # Removes the definition of the given constant, returning that constant's previous value
  - name: remove_const
    calls: 0

  # https://ruby-doc.org/core/Module.html#method-i-remove_method
  # https://ruby-doc.org/core/Module.html#method-i-method_removed
  - name: removed_method
    calls:
      value: method_removed

  # https://ruby-doc.org/core/Module.html#method-i-undef_method
  # https://ruby-doc.org/core/Module.html#method-i-method_undefined
  - name: undef_method
    calls:
      value: method_undefined

  # https://ruby-doc.org/core/Module.html#method-i-module_eval
  # https://ruby-doc.org/core/Module.html#method-i-class_eval
  - name: [module_eval, class_eval]
    eval: 0


  #   Class
  #
  # https://ruby-doc.org/core/Class.html

  # https://ruby-doc.org/core/Class.html#method-i-new
  - name: new
    calls:
      values: [allocate, initialize]

  #    Enumerable
  #
  # https://ruby-doc.org/core/Enumerable.html

  # https://ruby-doc.org/core/Enumerable.html#method-i-inject
  # https://ruby-doc.org/core/Enumerable.html#method-i-reject
  # inject(symbol)
  # inject(initial_operand, symbol)
  # inject {|memo, operand| ... }
  # inject(initial_operand) {|memo, operand| ... }
  - name: [inject, reduce]
    calls: -1
    # unless:
    #   has_block: true

  #   Marshal
  #
  # https://ruby-doc.org/core/Marshal.html

  # https://ruby-doc.org/core/Marshal.html#method-c-dump
  - names: dump
    has_receiver: Marshal
    calls:
      values: [marshal_dump, _dump]

  # https://ruby-doc.org/core/Marshal.html#method-c-load
  - names: [load, restore]
    has_receiver: Marshal
    calls:
      values: [marshal_load, _load]

  #   Forwardable
  #
  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/Forwardable.html

  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/Forwardable.html#method-i-def_instance_delegator
  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/SingleForwardable.html#method-i-def_single_delegator
  - names: [def_delegator, def_instance_delegator, def_single_delegator]
    defines: 2
    calls:
      - 1
      - argument: 0
        split: '::'

  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/Forwardable.html#method-i-def_instance_delegators
  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/SingleForwardable.html#method-i-def_single_delegators
  - name: [def_delegators, def_instance_delegators, def_single_delegators]
    calls:
      argument: 0
      split: '::'

  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/Forwardable.html#method-i-instance_delegate
  # https://ruby-doc.com/stdlib/libdoc/forwardable/rdoc/SingleForwardable.html#method-i-single_delegate
  - name: [delegate, instance_delegate, single_delegate]
    calls:
      arguments: '**'
      split: '::'
    unless:
      has_argument: 0
